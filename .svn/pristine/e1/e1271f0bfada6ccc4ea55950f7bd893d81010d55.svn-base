{
  "name": "soap",
  "version": "0.9.1",
  "description": "A minimal node SOAP client",
  "engines": {
    "node": ">=0.8.0"
  },
  "author": {
    "name": "Vinay Pulim",
    "email": "v@pulim.com"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "request": ">=2.9.0",
    "sax": ">=0.6",
    "strip-bom": "~0.3.1",
    "debug": "~0.7.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/milewise/node-soap.git"
  },
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "scripts": {
    "pretest": "jshint index.js lib test",
    "test": "mocha test/*-test.js test/security/*.js"
  },
  "keywords": [
    "soap"
  ],
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.17.0",
    "jshint": "2.3.0",
    "glob": "~3.2.8",
    "should": "~3.3.0",
    "timekeeper": "~0.0.4"
  },
  "readme": "# Soap [![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url]\r\n> A SOAP client and server for node.js.\r\n\r\nThis module lets you connect to web services using SOAP.  It also provides a server that allows you to run your own SOAP services.\r\n\r\n## Features:\r\n\r\n* Very simple API\r\n* Handles both RPC and Document schema types\r\n* Supports multiRef SOAP messages (thanks to [@kaven276](https://github.com/kaven276))\r\n* Support for both synchronous and asynchronous method handlers\r\n* WS-Security (currently only UsernameToken and PasswordText encoding is supported)\r\n\r\n## Install\r\n\r\nInstall with [npm](http://github.com/isaacs/npm):\r\n\r\n```\r\n  npm install soap\r\n```\r\n## Module\r\n\r\n### soap.createClient(url[, options], callback) - create a new SOAP client from a WSDL url. Also supports a local filesystem path.\r\n\r\n``` javascript\r\n  var soap = require('soap');\r\n  var url = 'http://example.com/wsdl?wsdl';\r\n  var args = {name: 'value'};\r\n  soap.createClient(url, function(err, client) {\r\n      client.MyFunction(args, function(err, result) {\r\n          console.log(result);\r\n      });\r\n  });\r\n```\r\n\r\n#### Options\r\n\r\nThe `options` argument allows you to customize the client with the following properties:\r\n\r\n- endpoint: to override the SOAP service's host specified in the `.wsdl` file.\r\n- request: to override the [request](https://github.com/request/request) module.\r\n- httpClient: to provide your own http client that implements `request(rurl, data, callback, exheaders, exoptions)`.\r\n\r\n### soap.listen(*server*, *path*, *services*, *wsdl*) - create a new SOAP server that listens on *path* and provides *services*.\r\n*wsdl* is an xml string that defines the service.\r\n\r\n``` javascript\r\n  var myService = {\r\n      MyService: {\r\n          MyPort: {\r\n              MyFunction: function(args) {\r\n                  return {\r\n                      name: args.name\r\n                  };\r\n              },\r\n\r\n              // This is how to define an asynchronous function.\r\n              MyAsyncFunction: function(args, callback) {\r\n                  // do some work\r\n                  callback({\r\n                      name: args.name\r\n                  })\r\n              },\r\n\r\n              // This is how to receive incoming headers\r\n              HeadersAwareFunction: function(args, cb, headers) {\r\n                  return {\r\n                      name: headers.Token\r\n                  };\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  var xml = require('fs').readFileSync('myservice.wsdl', 'utf8'),\r\n      server = http.createServer(function(request,response) {\r\n          response.end(\"404: Not Found: \"+request.url)\r\n      });\r\n\r\n  server.listen(8000);\r\n  soap.listen(server, '/wsdl', myService, xml);\r\n```\r\n\r\n### server logging\r\n\r\nIf the log method is defined it will be called with 'received' and 'replied'\r\nalong with data.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.log = function(type, data) {\r\n    // type is 'received' or 'replied'\r\n  };\r\n```\r\n\r\n### Server Events\r\n\r\nServer instances emit the following events:\r\n\r\n* request - Emitted for every received messages.\r\n  The signature of the callback is `function(request, methodName)`.\r\n* headers - Emitted when the SOAP Headers are not empty.\r\n  The signature of the callback is `function(headers, methodName)`.\r\n\r\nThe sequence order of the calls is `request`, `headers` and then the dedicated\r\nservice method.\r\n\r\n### SOAP Fault\r\n\r\nA service method can reply with a SOAP Fault to a client by `throw`ing an\r\nobject with a `Fault` property.\r\n\r\n``` javascript\r\n  throw {\r\n    Fault: {\r\n      Code: {\r\n        Value: \"soap:Sender\",\r\n        Subcode: { value: \"rpc:BadArguments\" }\r\n      },\r\n      Reason: { Text: \"Processing Error\" }\r\n    }\r\n  };\r\n```\r\n\r\n### SOAP Headers\r\n\r\nA service method can look at the SOAP headers by providing a 3rd arguments.\r\n\r\n``` javascript\r\n  {\r\n      HeadersAwareFunction: function(args, cb, headers) {\r\n          return {\r\n              name: headers.Token\r\n          };\r\n      }\r\n  }\r\n```\r\n\r\nIt is also possible to subscribe to the 'headers' event.\r\nThe event is triggered before the service method is called, and only when the\r\nSOAP Headers are not empty.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.on('headers', function(headers, methodName) {\r\n    // It is possible to change the value of the headers\r\n    // before they are handed to the service method.\r\n    // It is also possible to throw a SOAP Fault\r\n  });\r\n```\r\n\r\nFirst parameter is the Headers object;\r\nsecond parameter is the name of the SOAP method that will called\r\n(in case you need to handle the headers differently based on the method).\r\n\r\n### server security example using PasswordDigest\r\n\r\nIf server.authenticate is not defined no authentation will take place.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.authenticate = function(security) {\r\n    var created, nonce, password, user, token;\r\n    token = security.UsernameToken, user = token.Username,\r\n            password = token.Password, nonce = token.Nonce, created = token.Created;\r\n    return user === 'user' && password === soap.passwordDigest(nonce, created, 'password');\r\n  };\r\n```\r\n\r\n### server connection authorization\r\n\r\nThis is called prior to soap service method\r\nIf the method is defined and returns false the incoming connection is\r\nterminated.\r\n\r\n``` javascript\r\n  server = soap.listen(...)\r\n  server.authorizeConnection = function(req) {\r\n    return true; // or false\r\n  };\r\n```\r\n\r\n\r\n## Client\r\n\r\nAn instance of Client is passed to the soap.createClient callback.  It is used to execute methods on the soap service.\r\n\r\n### Client.describe() - description of services, ports and methods as a JavaScript object\r\n\r\n``` javascript\r\n  client.describe() // returns\r\n    {\r\n      MyService: {\r\n        MyPort: {\r\n          MyFunction: {\r\n            input: {\r\n              name: 'string'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n### Client.setSecurity(security) - use the specified security protocol\r\n`node-soap` has several default security protocols.  You can easily add your own\r\nas well.  The interface is quite simple.  Each protocol defines 2 methods:\r\n* addOptions - a method that accepts an options arg that is eventually passed directly to `request`\r\n* toXML - a method that reurns a string of XML.\r\n\r\nBy default there are 3 protocols:\r\n\r\n####BasicAuthSecurity\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.BasicAuthSecurity('username', 'password'));\r\n```\r\n\r\n####ClientSSLSecurity\r\n_Note_: If you run into issues using this protocol, consider passing these options\r\nas default request options to the constructor:\r\n* rejectUnauthorized: false\r\n* strictSSL: false\r\n* secureOptions: constants.SSL_OP_NO_TLSv1_2//this is likely needed for node >= 10.0\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.ClientSSLSecurity(\r\n    '/path/to/key'\r\n    , '/path/to/cert'\r\n    , {/*default request options*/}\r\n  ));\r\n```\r\n\r\n####WSSecurity\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.WSSecurity('username', 'password'))\r\n```\r\n\r\n####BearerSecurity\r\n\r\n``` javascript\r\n  client.setSecurity(new soap.BearerSecurity('token'));\r\n```\r\n\r\n### Client.*method*(args, callback) - call *method* on the SOAP service.\r\n\r\n``` javascript\r\n  client.MyFunction({name: 'value'}, function(err, result, raw, soapHeader) {\r\n      // result is a javascript object\r\n      // raw is the raw response\r\n      // soapHeader is the response soap header as a javascript object\r\n  })\r\n```\r\n### Client.*service*.*port*.*method*(args, callback[, options]) - call a *method* using a specific *service* and *port*\r\n\r\n``` javascript\r\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\r\n      // result is a javascript object\r\n  })\r\n```\r\n#### Options (optional)\r\n - Accepts any option that the request module accepts, see [here.](https://github.com/mikeal/request)\r\n - For example, you could set a timeout of 5 seconds on the request like this:\r\n``` javascript\r\n  client.MyService.MyPort.MyFunction({name: 'value'}, function(err, result) {\r\n      // result is a javascript object\r\n  }, {timeout: 5000})\r\n```\r\n\r\n### Client.*addSoapHeader*(soapHeader[, name, namespace, xmlns]) - add soapHeader to soap:Header node\r\n#### Options\r\n\r\n - `soapHeader`     Object({rootName: {name: \"value\"}}) or strict xml-string\r\n\r\n##### Optional parameters when first arg is object :\r\n - `name`           Unknown parameter (it could just a empty string)\r\n - `namespace`      prefix of xml namespace\r\n - `xmlns`          URI\r\n\r\n### Client.*lastRequest* - the property that contains last full soap request for client logging\r\n\r\n### Client Events\r\nClient instances emit the following events:\r\n\r\n* request - Emitted before a request is sent. The event handler receives the \r\nentire Soap request (Envelope) including headers.\r\n* message - Emitted before a request is sent. The event handler receives the \r\nSoap body contents. Useful if you don't want to log /store Soap headers.\r\n* soapError - Emitted when an erroneous response is received.\r\n  Useful if you want to globally log errors.\r\n* response - Emitted after a response is received. The event handler receives\r\nthe entire response body. This is emitted for all responses (both success and\r\nerrors).\r\n\r\n\r\n## WSSecurity\r\n\r\nWSSecurity implements WS-Security.  UsernameToken and PasswordText/PasswordDigest is supported. An instance of WSSecurity is passed to Client.setSecurity.\r\n\r\n``` javascript\r\n  new WSSecurity(username, password, passwordType)\r\n    //'PasswordDigest' or 'PasswordText' default is PasswordText\r\n```\r\n\r\n## Handling XML Attributes, Value and XML (wsdlOptions).\r\nSometimes it is necessary to override the default behaviour of `node-soap` in order to deal with the special requirements\r\nof your code base or a third library you use. Therefore you can use the `wsdlOptions` Object, which is passed in the\r\n`#createClient()` method and could have any (or all) of the following contents:\r\n```javascript\r\nvar wsdlOptions = {\r\n  attributesKey: 'theAttrs',\r\n  valueKey: 'theVal',\r\n  xmlKey: 'theXml'\r\n}\r\n```\r\nIf nothing (or an empty Object `{}`) is passed to the `#createClient()` method, the `node-soap` defaults (`attributesKey: 'attributes'`, `valueKey: '$value'` and `xmlKey: '$xml'`) are used.\r\n\r\n###Overriding the `value` key\r\nBy default, `node-soap` uses `$value` as key for any parsed XML value which may interfere with your other code as it\r\ncould be some reserved word, or the `$` in general cannot be used for a key to start with.\r\n\r\nYou can define your own `valueKey` by passing it in the `wsdl_options` to the createClient call like so:\r\n```javascript\r\nvar wsdlOptions = {\r\n  valueKey: 'theVal'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  // your code\r\n});\r\n```\r\n\r\n###Overriding the `xml` key\r\nAs `valueKey`, `node-soap` uses `$xml` as key. The xml key is used to pass XML Object without adding namespace or parsing the string.\r\n\r\nExample :\r\n\r\n```javascript\r\ndom = {\r\n     $xml: '<parentnode type=\"type\"><childnode></childnode></parentnode>'\r\n};\r\n```\r\n\r\n```xml\r\n<tns:dom>\r\n    <parentnode type=\"type\">\r\n          <childnode></childnode>\r\n    </parentnode>\r\n</tns:dom>\r\n```\r\n\r\nYou can define your own `xmlKey` by passing it in the `wsdl_options` to the createClient call like so:\r\n```javascript\r\nvar wsdlOptions = {\r\n  xmlKey: 'theXml'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  // your code\r\n});\r\n```\r\n\r\n###Overriding the `attributes` key\r\nYou can achieve attributes like:\r\n``` xml\r\n<parentnode>\r\n  <childnode name=\"childsname\">\r\n  </childnode>\r\n</parentnode>\r\n```\r\nBy attaching an attributes object to a node.\r\n``` javascript\r\n{\r\n  parentnode: {\r\n    childnode: {\r\n      attributes: {\r\n        name: 'childsname'\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nHowever, \"attributes\" may be a reserved key for some systems that actually want a node\r\n```xml\r\n<attributes>\r\n</attributes>\r\n```\r\n\r\nIn this case you can configure the attributes key in the `wsdlOptions` like so.\r\n```javascript\r\nvar wsdlOptions = {\r\n  attributesKey: '$attributes'\r\n};\r\n\r\nsoap.createClient(__dirname + '/wsdl/default_namespace.wsdl', wsdlOptions, function (err, client) {\r\n  client.*method*({\r\n    parentnode: {\r\n      childnode: {\r\n        $attributes: {\r\n          name: 'childsname'\r\n        }\r\n      }\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n## Handling \"ignored\" namespaces\r\nIf an Element in a `schema` definition depends on an Element which is present in the same namespace, normally the `tns:`\r\nnamespace prefix is used to identify this Element. This is not much of a problem as long as you have just one `schema` defined\r\n(inline or in a separate file). If there are more `schema` files, the `tns:` in the generated `soap` file resolved mostly to the parent `wsdl` file,\r\n which was obviously wrong.\r\n\r\n `node-soap` now handles namespace prefixes which shouldn't be resolved (because it's not necessary) as so called `ignoredNamespaces`\r\n which default to an Array of 3 Strings (`['tns', 'targetNamespace', 'typedNamespace']`).\r\n\r\n If this is not sufficient for your purpose you can easily add more namespace prefixes to this Array, or override it in its entirety\r\n by passing an `ignoredNamespaces` object within the `options` you pass in `soap.createClient()` method.\r\n\r\n A simple `ignoredNamespaces` object, which only adds certain namespaces could look like this:\r\n ```\r\n var options = {\r\n   ignoredNamespaces: {\r\n     namespaces: ['namespaceToIgnore', 'someOtherNamespace']\r\n   }\r\n }\r\n ```\r\n This would extend the `ignoredNamespaces` of the `WSDL` processor to `['tns', 'targetNamespace', 'typedNamespace', 'namespaceToIgnore', 'someOtherNamespace']`.\r\n\r\n If you want to override the default ignored namespaces you would simply pass the following `ignoredNamespaces` object within the `options`:\r\n ```\r\n var options = {\r\n     ignoredNamespaces: {\r\n       namespaces: ['namespaceToIgnore', 'someOtherNamespace'],\r\n       override: true\r\n     }\r\n   }\r\n ```\r\n This would override the default `ignoredNamespaces` of the `WSDL` processor to `['namespaceToIgnore', 'someOtherNamespace']`. (This shouldn't be necessary, anyways).\r\n\r\n## Contributors\r\n\r\n * Author: [Vinay Pulim](https://github.com/vpulim)\r\n * Lead Maintainer: [Joe Spencer](https://github.com/jsdevel)\r\n * [All Contributors](https://github.com/vpulim/node-soap/graphs/contributors)\r\n\r\n[downloads-image]: http://img.shields.io/npm/dm/soap.svg\r\n[npm-url]: https://npmjs.org/package/soap\r\n[npm-image]: http://img.shields.io/npm/v/soap.svg\r\n\r\n[travis-url]: https://travis-ci.org/vpulim/node-soap\r\n[travis-image]: http://img.shields.io/travis/vpulim/node-soap.svg\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/milewise/node-soap/issues"
  },
  "_id": "soap@0.9.1",
  "dist": {
    "shasum": "ab032506ebc916837f9c2b27394f1d118f7f4d7f"
  },
  "_from": "soap@",
  "_resolved": "https://registry.npmjs.org/soap/-/soap-0.9.1.tgz"
}
